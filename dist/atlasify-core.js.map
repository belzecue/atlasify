{"version":3,"file":"atlasify-core.js","sources":["../../maxrects-packer/src/geom/Rectangle.ts","../../maxrects-packer/src/abstract-bin.ts","../../maxrects-packer/src/maxrects-bin.ts","../../maxrects-packer/src/oversized-element-bin.ts","../../maxrects-packer/src/maxrects-packer.ts","../node_modules/rollup-plugin-node-builtins/src/es6/path.js","../src/geom/Vec2Const.ts","../src/geom/Vec2.ts","../src/geom/Sheet.ts","../src/atlasify.ts"],"sourcesContent":["export interface IRectangle {\n    width: number;\n    height: number;\n    x: number;\n    y: number;\n    [propName: string]: any;\n}\n\nexport class Rectangle implements IRectangle {\n    public data: any;\n    public oversized: boolean = false;\n    constructor (\n        public width: number = 0,\n        public height: number = 0,\n        public x: number = 0,\n        public y: number = 0,\n        public rot: boolean = false) {\n        this.data = {};\n    }\n    public static Collide (first: Rectangle, second: Rectangle) { return first.collide(second); }\n    public static Contain (first: Rectangle, second: Rectangle) { return first.contain(second); }\n\n    public area (): number { return this.width * this.height; }\n\n    public collide (rect: Rectangle): boolean {\n        return (\n            rect.x < this.x + this.width &&\n            rect.x + rect.width > this.x &&\n            rect.y < this.y + this.height &&\n            rect.y + rect.height > this.y\n        );\n    }\n\n    public contain (rect: Rectangle): boolean {\n        return (rect.x >= this.x && rect.y >= this.y &&\n                rect.x + rect.width <= this.x + this.width && rect.y + rect.height <= this.y + this.height);\n    }\n\n}\n","import { IRectangle, Rectangle } from \"./geom/Rectangle\";\nimport { IOption } from \"./maxrects-packer\";\n\nexport interface IBin {\n    width: number;\n    height: number;\n    maxWidth: number;\n    maxHeight: number;\n    freeRects: IRectangle[];\n    rects: IRectangle[];\n    options: IOption;\n}\n\nexport abstract class Bin implements IBin {\n    public width!: number;\n    public height!: number;\n    public maxWidth!: number;\n    public maxHeight!: number;\n    public freeRects!: IRectangle[];\n    public rects!: IRectangle[];\n    public options!: IOption;\n    public abstract add (rect: IRectangle): IRectangle | undefined;\n    public abstract add (width: number, height: number, data: any): IRectangle | undefined;\n}\n","import { EDGE_MAX_VALUE, IOption } from \"./maxrects-packer\";\nimport { Rectangle, IRectangle } from \"./geom/Rectangle\";\nimport { Bin } from \"./abstract-bin\";\n\nexport class MaxRectsBin<T extends IRectangle = Rectangle> extends Bin {\n    public width: number;\n    public height: number;\n    public freeRects: Rectangle[] = [];\n    public rects: IRectangle[] = [];\n    private verticalExpand: boolean = false;\n    private stage: Rectangle;\n\n    constructor (\n        public maxWidth: number = EDGE_MAX_VALUE,\n        public maxHeight: number = EDGE_MAX_VALUE,\n        public padding: number = 0,\n        public options: IOption = { smart: true, pot: true, square: true, allowRotation: false }\n    ) {\n        super();\n        this.width = this.options.smart ? 0 : maxWidth;\n        this.height = this.options.smart ? 0 : maxHeight;\n        this.freeRects.push(new Rectangle(this.maxWidth + this.padding, this.maxHeight + this.padding));\n        this.stage = new Rectangle(this.width, this.height);\n    }\n\n    public add (rect: T): T | undefined;\n    public add (width: number, height: number, data: any): Rectangle | undefined;\n    public add (...args: any[]): any {\n        let width: number;\n        let height: number;\n        let data: any;\n        let rect: IRectangle | undefined;\n        if (args.length === 1) {\n            if (typeof args[0] !== 'object') throw new Error(\"MacrectsBin.add(): Wrong parameters\");\n            rect = args[0] as T;\n            width = rect.width;\n            height = rect.height;\n        } else {\n            width = args[0];\n            height = args[1];\n            data = args.length > 2 ? args[2] : null;\n        }\n\n        let node: Rectangle | undefined = this.findNode(width + this.padding, height + this.padding);\n        if (node) {\n            this.updateBinSize(node);\n            let numRectToProcess = this.freeRects.length;\n            let i: number = 0;\n            while (i < numRectToProcess) {\n                if (this.splitNode(this.freeRects[i], node)) {\n                    this.freeRects.splice(i, 1);\n                    numRectToProcess--;\n                    i--;\n                }\n                i++;\n            }\n            this.pruneFreeList();\n            this.verticalExpand = this.width > this.height ? true : false;\n            if (!rect) {\n                rect = new Rectangle(width, height, node.x, node.y, node.rot);\n                rect.data = data;\n            } else {\n                rect.x = node.x;\n                rect.y = node.y;\n                rect.rot = node.rot;\n            }\n            this.rects.push(rect);\n            return rect;\n        } else if (!this.verticalExpand) {\n            if (this.updateBinSize(new Rectangle(width + this.padding, height + this.padding, this.width + this.padding, 0))\n                || this.updateBinSize(new Rectangle(width + this.padding, height + this.padding, 0, this.height + this.padding))) {\n                return rect ? this.add(rect as T) : this.add(width, height, data);\n            }\n        } else {\n            if (this.updateBinSize(new Rectangle(\n                width + this.padding, height + this.padding,\n                0, this.height + this.padding\n            )) || this.updateBinSize(new Rectangle(\n                width + this.padding, height + this.padding,\n                this.width + this.padding, 0\n            ))) {\n                return rect ? this.add(rect as T) : this.add(width, height, data);\n            }\n        }\n        return undefined;\n    }\n\n    private findNode (width: number, height: number): Rectangle | undefined {\n        let score: number = Number.MAX_VALUE;\n        let areaFit: number;\n        let r: Rectangle;\n        let bestNode: Rectangle | undefined;\n        for (let i in this.freeRects) {\n            r = this.freeRects[i];\n            if (r.width >= width && r.height >= height) {\n                areaFit = r.width * r.height - width * height;\n                if (areaFit < score) {\n                    bestNode = new Rectangle(width, height, r.x, r.y);\n                    score = areaFit;\n                }\n            }\n            if (!this.options.allowRotation) continue;\n            // Continue to test 90-degree rotated rectangle\n            if (r.width >= height && r.height >= width) {\n                areaFit = r.width * r.height - height * width;\n                if (areaFit < score) {\n                    bestNode = new Rectangle(height, width, r.x, r.y, true); // Rotated node\n                    score = areaFit;\n                }\n            }\n        }\n        return bestNode;\n    }\n\n    private splitNode (freeRect: Rectangle, usedNode: Rectangle): boolean {\n        // Test if usedNode intersect with freeRect\n        if (!freeRect.collide(usedNode)) return false;\n\n        // Do vertical split\n        if (usedNode.x < freeRect.x + freeRect.width && usedNode.x + usedNode.width > freeRect.x) {\n            // New node at the top side of the used node\n            if (usedNode.y > freeRect.y && usedNode.y < freeRect.y + freeRect.height) {\n                let newNode: Rectangle = new Rectangle(freeRect.width, usedNode.y - freeRect.y, freeRect.x, freeRect.y);\n                this.freeRects.push(newNode);\n            }\n            // New node at the bottom side of the used node\n            if (usedNode.y + usedNode.height < freeRect.y + freeRect.height) {\n                let newNode = new Rectangle(\n                    freeRect.width,\n                    freeRect.y + freeRect.height - (usedNode.y + usedNode.height),\n                    freeRect.x,\n                    usedNode.y + usedNode.height\n                );\n                this.freeRects.push(newNode);\n            }\n        }\n\n        // Do Horizontal split\n        if (usedNode.y < freeRect.y + freeRect.height &&\n            usedNode.y + usedNode.height > freeRect.y) {\n            // New node at the left side of the used node.\n            if (usedNode.x > freeRect.x && usedNode.x < freeRect.x + freeRect.width) {\n                let newNode = new Rectangle(usedNode.x - freeRect.x, freeRect.height, freeRect.x, freeRect.y);\n                this.freeRects.push(newNode);\n            }\n            // New node at the right side of the used node.\n            if (usedNode.x + usedNode.width < freeRect.x + freeRect.width) {\n                let newNode = new Rectangle(\n                    freeRect.x + freeRect.width - (usedNode.x + usedNode.width),\n                    freeRect.height,\n                    usedNode.x + usedNode.width,\n                    freeRect.y\n                );\n                this.freeRects.push(newNode);\n            }\n        }\n        return true;\n    }\n\n    private pruneFreeList () {\n        // Go through each pair of freeRects and remove any rects that is redundant\n        let i: number = 0;\n        let j: number = 0;\n        let len: number = this.freeRects.length;\n        while (i < len) {\n            j = i + 1;\n            let tmpRect1 = this.freeRects[i];\n            while (j < len) {\n                let tmpRect2 = this.freeRects[j];\n                if (tmpRect2.contain(tmpRect1)) {\n                    this.freeRects.splice(i, 1);\n                    i--;\n                    len--;\n                    break;\n                }\n                if (tmpRect1.contain(tmpRect2)) {\n                    this.freeRects.splice(j, 1);\n                    j--;\n                    len--;\n                }\n                j++;\n            }\n            i++;\n        }\n    }\n\n    private updateBinSize (node: Rectangle): boolean {\n        if (!this.options.smart) return false;\n        if (this.stage.contain(node)) return false;\n        let tmpWidth: number = Math.max(this.width, node.x + node.width - this.padding);\n        let tmpHeight: number = Math.max(this.height, node.y + node.height - this.padding);\n        if (this.options.pot) {\n            tmpWidth = Math.pow(2, Math.ceil(Math.log(tmpWidth) * Math.LOG2E));\n            tmpHeight = Math.pow(2, Math.ceil(Math.log(tmpHeight) * Math.LOG2E));\n        }\n        if (this.options.square) {\n            tmpWidth = tmpHeight = Math.max(tmpWidth, tmpHeight);\n        }\n        if (tmpWidth > this.maxWidth + this.padding || tmpHeight > this.maxHeight + this.padding) {\n            return false;\n        }\n        this.expandFreeRects(tmpWidth + this.padding, tmpHeight + this.padding);\n        this.width = this.stage.width = tmpWidth;\n        this.height = this.stage.height = tmpHeight;\n        return true;\n    }\n\n    private expandFreeRects (width: number, height: number) {\n        this.freeRects.forEach((freeRect, index) => {\n            if (freeRect.x + freeRect.width >= Math.min(this.width + this.padding, width)) {\n                freeRect.width = width - freeRect.x;\n            }\n            if (freeRect.y + freeRect.height >= Math.min(this.height + this.padding, height)) {\n                freeRect.height = height - freeRect.y;\n            }\n        }, this);\n        this.freeRects.push(new Rectangle(width - this.width - this.padding, height, this.width + this.padding, 0));\n        this.freeRects.push(new Rectangle(width, height - this.height - this.padding, 0, this.height + this.padding));\n        this.freeRects.forEach((freeRect, index) => {\n            if (freeRect.width <= 0 || freeRect.height <= 0) {\n                this.freeRects.splice(index, 1);\n            }\n        }, this);\n        this.pruneFreeList();\n    }\n}\n","import { IRectangle, Rectangle } from \"./geom/Rectangle\";\nimport { IOption } from \"./maxrects-packer\";\nimport { Bin } from \"./abstract-bin\";\n\nexport class OversizedElementBin<T extends IRectangle = Rectangle> extends Bin {\n    public width: number;\n    public height: number;\n    public data: any;\n    public maxWidth: number;\n    public maxHeight: number;\n    public options: IOption;\n    public rects: T[] = [];\n    public freeRects: IRectangle[];\n\n    constructor (rect: T);\n    constructor (width: number, height: number, data: any);\n    constructor (...args: any[]) {\n        super();\n        if (args.length === 1) {\n            if (typeof args[0] !== 'object') throw new Error(\"OversizedElementBin: Wrong parameters\");\n            const rect = args[0];\n            this.rects = [rect];\n            this.width = rect.width;\n            this.height = rect.height;\n            this.data = rect.data;\n            rect.oversized = true;\n        } else {\n            this.width = args[0];\n            this.height = args[1];\n            this.data = args.length > 2 ? args[2] : null;\n            const rect: any = new Rectangle(this.width, this.height);\n            rect.oversized = true;\n            rect.data = this.data;\n            this.rects.push(rect);\n        }\n        this.freeRects = [];\n        this.maxWidth = this.width;\n        this.maxHeight = this.height;\n        this.options = { smart: false, pot: false, square: false };\n    }\n\n    add () { return undefined; }\n}\n","import { Rectangle, IRectangle } from \"./geom/Rectangle\";\nimport { MaxRectsBin } from \"./maxrects-bin\";\nimport { OversizedElementBin } from \"./oversized-element-bin\";\nimport { Bin, IBin } from \"./abstract-bin\";\n\nexport const EDGE_MAX_VALUE: number = 4096;\nexport const EDGE_MIN_VALUE: number = 128;\n\n/**\n * Options for MaxRect Packer\n * @property {boolean} options.smart Smart sizing packer (default is true)\n * @property {boolean} options.pot use power of 2 sizing (default is true)\n * @property {boolean} options.square use square size (default is false)\n * @export\n * @interface Option\n */\nexport interface IOption {\n    smart?: boolean;\n    pot?: boolean;\n    square?: boolean;\n    allowRotation?: boolean;\n}\n\nexport class MaxRectsPacker<T extends IRectangle = Rectangle> {\n    public bins: Bin[];\n\n    /**\n     * Creates an instance of MaxRectsPacker.\n     * @param {number} width of the output atlas (default is 4096)\n     * @param {number} height of the output atlas (default is 4096)\n     * @param {number} padding between glyphs/images (default is 0)\n     * @param {IOption} [options={}] (Optional) packing options\n     * @memberof MaxRectsPacker\n     */\n    constructor (\n        public width: number = EDGE_MAX_VALUE,\n        public height: number = EDGE_MAX_VALUE,\n        public padding: number = 0,\n        public options: IOption = { smart: true, pot: true, square: true, allowRotation: false }\n    ) {\n        this.bins = [];\n    }\n\n    /**\n     * Add a bin/rectangle object with data to packer\n     * @param {number} width of the input bin/rectangle\n     * @param {number} height of the input bin/rectangle\n     * @param {*} data custom data object\n     * @memberof MaxRectsPacker\n     */\n    public add (width: number, height: number, data: any): IRectangle;\n    /**\n     * Add a bin/rectangle object extends IRectangle to packer\n     * @template T Generic type extends IRectangle interface\n     * @param {T} rect the rect object add to the packer bin\n     * @memberof MaxRectsPacker\n     */\n    public add (rect: T): T;\n    public add (...args: any[]): any {\n        let width: number;\n        let height: number;\n        let data: any;\n        if (args.length === 1) {\n            if (typeof args[0] !== 'object') throw new Error(\"MacrectsPacker.add(): Wrong parameters\");\n            const rect: T = args[0];\n            if (rect.width > this.width || rect.height > this.height) {\n                this.bins.push(new OversizedElementBin<T>(rect));\n            } else {\n                let added = this.bins.find(bin => bin.add(rect) !== undefined);\n                if (!added) {\n                    let bin = new MaxRectsBin<T>(this.width, this.height, this.padding, this.options);\n                    bin.add(rect);\n                    this.bins.push(bin);\n                }\n            }\n        } else {\n            width = args[0];\n            height = args[1];\n            data = args.length > 2 ? args[2] : null;\n            if (width > this.width || height > this.height) {\n                this.bins.push(new OversizedElementBin<T>(width, height, data));\n            } else {\n                let added = this.bins.find(bin => bin.add(width, height, data) !== undefined);\n                if (!added) {\n                    let bin = new MaxRectsBin<T>(this.width, this.height, this.padding, this.options);\n                    bin.add(width, height, data);\n                    this.bins.push(bin);\n                }\n            }\n        }\n    }\n\n    /**\n     * Add an Array of bins/rectangles to the packer.\n     * Object structure: { width, height, data }\n     * @param {IRectangle[]} rects Array of bin/rectangles\n     * @memberof MaxRectsPacker\n     */\n    public addArray (rects: T[]) {\n        this.sort(rects).forEach(rect => this.add(rect));\n    }\n\n    /**\n     * Load bins to the packer, overwrite exist bins\n     * @param {MaxRectsBin[]} bins MaxRectsBin objects\n     * @memberof MaxRectsPacker\n     */\n    public load (bins: Bin[]) {\n        bins.forEach((bin, index) => {\n            if (bin.maxWidth > this.width || bin.maxHeight > this.height) {\n                this.bins.push(new OversizedElementBin(bin.width, bin.height, {}));\n            } else {\n                let newBin = new MaxRectsBin<T>(this.width, this.height, this.padding, bin.options);\n                newBin.freeRects.splice(0);\n                bin.freeRects.forEach((r, i) => {\n                    newBin.freeRects.push(new Rectangle(r.width, r.height, r.x, r.y));\n                });\n                newBin.width = bin.width;\n                newBin.height = bin.height;\n                this.bins[index] = newBin;\n            }\n        }, this);\n    }\n\n    /**\n     * Output current bins to save\n     * @memberof MaxRectsPacker\n     */\n    public save (): IBin[] {\n        let saveBins: IBin[] = [];\n        this.bins.forEach((bin => {\n            let saveBin: IBin = {\n                width: bin.width,\n                height: bin.height,\n                maxWidth: bin.maxWidth,\n                maxHeight: bin.maxHeight,\n                freeRects: [],\n                rects: [],\n                options: bin.options\n            };\n            bin.freeRects.forEach(r => {\n                saveBin.freeRects.push({\n                    x: r.x,\n                    y: r.y,\n                    width: r.width,\n                    height: r.height\n                });\n            });\n            saveBins.push(saveBin);\n        }));\n        return saveBins;\n    }\n\n    private sort (rects: T[]) {\n        return rects.slice().sort((a, b) => Math.max(b.width, b.height) - Math.max(a.width, a.height));\n    }\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe =\n    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\nvar splitPath = function(filename) {\n  return splitPathRe.exec(filename).slice(1);\n};\n\n// path.resolve([from ...], to)\n// posix version\nexport function resolve() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : '/';\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexport function normalize(path) {\n  var isPathAbsolute = isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isPathAbsolute).join('/');\n\n  if (!path && !isPathAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isPathAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexport function isAbsolute(path) {\n  return path.charAt(0) === '/';\n}\n\n// posix version\nexport function join() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n}\n\n\n// path.relative(from, to)\n// posix version\nexport function relative(from, to) {\n  from = resolve(from).substr(1);\n  to = resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n}\n\nexport var sep = '/';\nexport var delimiter = ':';\n\nexport function dirname(path) {\n  var result = splitPath(path),\n      root = result[0],\n      dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n}\n\nexport function basename(path, ext) {\n  var f = splitPath(path)[2];\n  // TODO: make this comparison case-insensitive on windows?\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n}\n\n\nexport function extname(path) {\n  return splitPath(path)[3];\n}\nexport default {\n  extname: extname,\n  basename: basename,\n  dirname: dirname,\n  sep: sep,\n  delimiter: delimiter,\n  relative: relative,\n  join: join,\n  isAbsolute: isAbsolute,\n  normalize: normalize,\n  resolve: resolve\n};\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b' ?\n    function (str, start, len) { return str.substr(start, len) } :\n    function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n","/**\n * A 2d Vector class to perform constant operations. Use this class to make sure that objects stay consts, e.g.\n * public function getPos():Vec2Const { return _pos; } // pos is not allowed to change outside of bot.\n *\n * Many method has a postfix of XY - this allows you to operate on the components directly i.e.\n * instead of writing add(new Vec2(1, 2)) you can directly write addXY(1, 2);\n *\n * For performance reasons I am not using an interface for read only specification since internally it should be possible\n * to use direct access to x and y. Externally x and y is obtained via getters which are a bit slower than direct access of\n * a public constiable. I suggest you stick with this during development. If there is a bottleneck you can just remove the get\n * accessors and directly expose _x and _y (rename it to x and replace all _x and _y to this.x, this.y internally).\n *\n * The class in not commented properly yet - just subdivided into logical chunks.\n *\n * @author playchilla.com\n *\n * License: Use it as you wish and if you like it - link back!\n */\nimport { Vec2 } from \"./Vec2\";\n\nexport class Vec2Const {\n    public static lawOfCosAngle (a: number, b: number, c: number): number {\n        const v1: number = (a * a + b * b - c * c) / (2 * a * b);\n        const v2: number = Math.acos(v1);\n        return v2;\n    }\n    private static _RadsToDeg: number = 180 / Math.PI;\n\n    public _x: number;\n    public _y: number;\n    public get x (): number { return this._x; }\n    public get y (): number { return this._y; }\n\n    constructor (x: number = 0, y: number = 0) {\n        this._x = x;\n        this._y = y;\n    }\n\n    public clone (): Vec2 { return new Vec2(this._x, this._y); }\n\n    /**\n     * Add, sub, mul and div\n     */\n    public add (pos: Vec2Const): Vec2 { return new Vec2(this._x + pos._x, this._y + pos._y); }\n    public addXY (x: number, y: number): Vec2 { return new Vec2(this._x + x, this._y + y); }\n\n    public sub (pos: Vec2Const): Vec2 { return new Vec2(this._x - pos._x, this._y - pos._y); }\n    public subXY (x: number, y: number): Vec2 { return new Vec2(this._x - x, this._y - y); }\n\n    public mul (vec: Vec2Const): Vec2 { return new Vec2(this._x * vec._x, this._y * vec._y); }\n    public mulXY (x: number, y: number): Vec2 { return new Vec2(this._x * x, this._y * y); }\n\n    public div (vec: Vec2Const): Vec2 { return new Vec2(this._x / vec._x, this._y / vec._y); }\n    public divXY (x: number, y: number): Vec2 { return new Vec2(this._x / x, this._y / y); }\n\n    /**\n     * Scale\n     */\n    public scale (s: number): Vec2 { return new Vec2(this._x * s, this._y * s); }\n\n    public rescale (newLength: number): Vec2 {\n        const nf: number = newLength / Math.sqrt(this._x * this._x + this._y * this._y);\n        return new Vec2(this._x * nf, this._y * nf);\n    }\n\n    /**\n     * Normalize\n     */\n    public normalize (mag: number = 1): Vec2 {\n        const nf: number = mag / Math.sqrt(this._x * this._x + this._y * this._y);\n        return new Vec2(this._x * nf, this._y * nf);\n    }\n\n    /**\n     * Distance\n     */\n    public get length (): number { return Math.sqrt(this._x * this._x + this._y * this._y); }\n    public get lengthSqr (): number { return this._x * this._x + this._y * this._y; }\n    public distance (vec: Vec2Const): number {\n        const xd: number = this._x - vec._x;\n        const yd: number = this._y - vec._y;\n        return Math.sqrt(xd * xd + yd * yd);\n    }\n    public distanceXY (x: number, y: number): number {\n        const xd: number = this._x - x;\n        const yd: number = this._y - y;\n        return Math.sqrt(xd * xd + yd * yd);\n    }\n    public distanceSqr (vec: Vec2Const): number {\n        const xd: number = this._x - vec._x;\n        const yd: number = this._y - vec._y;\n        return xd * xd + yd * yd;\n    }\n    public distanceXYSqr (x: number, y: number): number {\n        const xd: number = this._x - x;\n        const yd: number = this._y - y;\n        return xd * xd + yd * yd;\n    }\n\n    /**\n     * Queries.\n     */\n    public equals (vec: Vec2Const): boolean { return this._x === vec._x && this._y === vec._y; }\n    public equalsXY (x: number, y: number): boolean { return this._x === x && this._y === y; }\n    public isNormalized (): boolean { return Math.abs((this._x * this._x + this._y * this._y) - 1) < Vec2.EPSILONSQR; }\n    public isZero (): boolean { return this._x === 0 && this._y === 0; }\n    public isNear (vec2: Vec2Const): boolean { return this.distanceSqr(vec2) < Vec2.EPSILONSQR; }\n    public isNearXY (x: number, y: number): boolean { return this.distanceXYSqr(x, y) < Vec2.EPSILONSQR; }\n    public isWithin (vec2: Vec2Const, epsilon: number): boolean { return this.distanceSqr(vec2) < epsilon * epsilon; }\n    public isWithinXY (x: number, y: number, epsilon: number): boolean { return this.distanceXYSqr(x, y) < epsilon * epsilon; }\n    public isValid (): boolean { return !isNaN(this._x) && !isNaN(this._y) && isFinite(this._x) && isFinite(this._y); }\n    public getDegrees (): number { return this.getRads() * Vec2Const._RadsToDeg; }\n    public getRads (): number { return Math.atan2(this._y, this._x); }\n    public getRadsFullAngle (): number { return (this.getRads() + 2 * Math.PI) % (2 * Math.PI); }\n    public getMinRadsBetween (vec: Vec2Const): number { return Math.acos(this.normalize().dot(vec.normalize())); }\n    public getRadsBetween (vec: Vec2Const): number { return vec.getRads() - this.getRads(); }\n\n    /**\n     * Dot product\n     */\n    public dot (vec: Vec2Const): number { return this._x * vec._x + this._y * vec._y; }\n    public dotXY (x: number, y: number): number { return this._x * x + this._y * y; }\n\n    /**\n     * Cross determinant\n     */\n    public crossDet (vec: Vec2Const): number { return this._x * vec._y - this._y * vec._x; }\n    public crossDetXY (x: number, y: number): number { return this._x * y - this._y * x; }\n\n    /**\n     * Rotate\n     */\n    public rotate (rads: number): Vec2 {\n        const s: number = Math.sin(rads);\n        const c: number = Math.cos(rads);\n        return new Vec2(this._x * c - this._y * s, this._x * s + this._y * c);\n    }\n    public normalRight (): Vec2 { return new Vec2(-this._y, this._x); }\n    public normalLeft (): Vec2 { return new Vec2(this._y, -this._x); }\n    public negate (): Vec2 { return new Vec2(-this._x, -this._y); }\n\n    /**\n     * Spinor rotation\n     */\n    public rotateSpinorXY (x: number, y: number): Vec2 { return new Vec2(this._x * x - this._y * y, this._x * y + this._y * x); }\n    public rotateSpinor (vec: Vec2Const): Vec2 { return new Vec2(this._x * vec._x - this._y * vec._y, this._x * vec._y + this._y * vec._x); }\n    public spinorBetween (vec: Vec2Const): Vec2 {\n        const d: number = this.lengthSqr;\n        const r: number = (vec._x * this._x + vec._y * this._y) / d;\n        const i: number = (vec._y * this._x - vec._x * this._y) / d;\n        return new Vec2(r, i);\n    }\n\n    /**\n     * Lerp / slerp\n     * Note: Slerp is not well tested yet.\n     */\n    public lerp (to: Vec2Const, t: number): Vec2 { return new Vec2(this._x + t * (to._x - this._x), this._y + t * (to._y - this._y)); }\n\n    public slerp (vec: Vec2Const, t: number): Vec2 {\n        const cosTheta: number = this.dot(vec);\n        const theta: number = Math.acos(cosTheta);\n        const sinTheta: number = Math.sin(theta);\n        if (sinTheta <= Vec2.EPSILON) {\n            return vec.clone();\n        }\n        const w1: number = Math.sin((1 - t) * theta) / sinTheta;\n        const w2: number = Math.sin(t * theta) / sinTheta;\n        return this.scale(w1).add(vec.scale(w2));\n    }\n\n    /**\n     * Reflect\n     */\n    public reflect (normal: Vec2Const): Vec2 {\n        const d: number = 2 * (this._x * normal._x + this._y * normal._y);\n        return new Vec2(this._x - d * normal._x, this._y - d * normal._y);\n    }\n\n    /**\n     * Mirror\n     */\n    public mirror (normal: Vec2Const): Vec2 {\n        return this.reflect(normal).scale(-1);\n        // return this.rotate(2 * this.getRadsBetween(normal));\n    }\n\n    /**\n     * String\n     */\n    public toString (): string { return \"[\" + this._x + \", \" + this._y + \"]\"; }\n\n    public getMin (p: Vec2Const): Vec2 { return new Vec2(Math.min(p._x, this._x), Math.min(p._y, this._y)); }\n    public getMax (p: Vec2Const): Vec2 { return new Vec2(Math.max(p._x, this._x), Math.max(p._y, this._y)); }\n}\n","import { Vec2Const } from \"./Vec2Const\";\n\n/**\n * A 2d Vector class to that is mutable.\n *\n * Due to the lack of AS3 operator overloading most methods exists in different names,\n * all methods that ends with Self actually modifies the object itself (including obvious ones copy, copyXY and zero).\n * For example v1 += v2; is written as v1.addSelf(v2);\n *\n * The class in not commented properly yet - just subdivided into logical chunks.\n *\n * @author playchilla.com\n *\n * License: Use it as you wish and if you like it - link back!\n */\nexport class Vec2 extends Vec2Const {\n    public static ZERO: Vec2Const = new Vec2Const();\n    public static EPSILON: number = 0.0000001;\n    public static EPSILONSQR: number = Vec2.EPSILON * Vec2.EPSILON;\n\n    public static createRandomDir (): Vec2 {\n        const rads: number = Math.random() * Math.PI * 2;\n        return new Vec2(Math.cos(rads), Math.sin(rads));\n    }\n\n    /**\n     * Helpers\n     */\n    public static swap (a: Vec2, b: Vec2): void {\n        const x: number = a._x;\n        const y: number = a._y;\n        a._x = b._x;\n        a._y = b._y;\n        b._x = x;\n        b._y = y;\n    }\n\n    constructor (x: number = 0, y: number = 0) { super(x, y); }\n\n    /**\n     * Copy / assignment\n     */\n    public set x (x: number) { this._x = x; }\n    public get x (): number { return this._x; }\n    public set y (y: number) { this._y = y; }\n    public get y (): number { return this._y; }\n\n    public copy (pos: Vec2Const): Vec2 {\n        this._x = pos._x;\n        this._y = pos._y;\n        return this;\n    }\n    public copyXY (x: number, y: number): Vec2 {\n        this._x = x;\n        this._y = y;\n        return this;\n    }\n    public zero (): Vec2 {\n        this._x = 0;\n        this._y = 0;\n        return this;\n    }\n\n    /**\n     * Add\n     */\n    public addSelf (pos: Vec2Const): Vec2 {\n        this._x += pos._x;\n        this._y += pos._y;\n        return this;\n    }\n    public addXYSelf (x: number, y: number): Vec2 {\n        this._x += x;\n        this._y += y;\n        return this;\n    }\n\n    /**\n     * Sub\n     */\n    public subSelf (pos: Vec2Const): Vec2 {\n        this._x -= pos._x;\n        this._y -= pos._y;\n        return this;\n    }\n    public subXYSelf (x: number, y: number): Vec2 {\n        this._x -= x;\n        this._y -= y;\n        return this;\n    }\n\n    /**\n     * Mul\n     */\n    public mulSelf (vec: Vec2Const): Vec2 {\n        this._x *= vec._x;\n        this._y *= vec._y;\n        return this;\n    }\n    public mulXYSelf (x: number, y: number): Vec2 {\n        this._x *= x;\n        this._y *= y;\n        return this;\n    }\n\n    /**\n     * Div\n     */\n    public divSelf (vec: Vec2Const): Vec2 {\n        this._x /= vec._x;\n        this._y /= vec._y;\n        return this;\n    }\n    public divXYSelf (x: number, y: number): Vec2 {\n        this._x /= x;\n        this._y /= y;\n        return this;\n    }\n\n    /**\n     * Scale\n     */\n    public scaleSelf (s: number): Vec2 {\n        this._x *= s;\n        this._y *= s;\n        return this;\n    }\n\n    public rescaleSelf (newLength: number): Vec2 {\n        const nf: number = newLength / Math.sqrt(this._x * this._x + this._y * this._y);\n        this._x *= nf;\n        this._y *= nf;\n        return this;\n    }\n\n    /**\n     * Normalize\n     */\n    public normalizeSelf (): Vec2 {\n        const nf: number = 1 / Math.sqrt(this._x * this._x + this._y * this._y);\n        this._x *= nf;\n        this._y *= nf;\n        return this;\n    }\n\n    /**\n     * Rotate\n     */\n    public rotateSelf (rads: number): Vec2 {\n        const s: number = Math.sin(rads);\n        const c: number = Math.cos(rads);\n        const xr: number = this._x * c - this._y * s;\n        this._y = this._x * s + this._y * c;\n        this._x = xr;\n        return this;\n    }\n    public normalRightSelf (): Vec2 {\n        const xr: number = this._x;\n        this._x = -this._y;\n        this._y = xr;\n        return this;\n    }\n    public normalLeftSelf (): Vec2 {\n        const xr: number = this._x;\n        this._x = this._y;\n        this._y = -xr;\n        return this;\n    }\n    public negateSelf (): Vec2 {\n        this._x = -this._x;\n        this._y = -this._y;\n        return this;\n    }\n\n    /**\n     * Spinor\n     */\n    public rotateSpinorSelf (vec: Vec2Const): Vec2 {\n        const xr: number = this._x * vec._x - this._y * vec._y;\n        this._y = this._x * vec._y + this._y * vec._x;\n        this._x = xr;\n        return this;\n    }\n\n    /**\n     * lerp\n     */\n    public lerpSelf (to: Vec2Const, t: number): Vec2 {\n        this._x = this._x + t * (to._x - this._x);\n        this._y = this._y + t * (to._y - this._y);\n        return this;\n    }\n}\n","import { Rectangle } from \"maxrects-packer\";\nimport { Vec2 } from \"./Vec2\";\nimport Jimp from \"jimp\";\n\nexport class Sheet extends Rectangle {\n\n    public name: string = \"\";\n    public sourceFrame: Rectangle;\n    public anchor: Vec2;\n    public nineSliceFrame: Rectangle;\n    public trimmed: boolean = false;\n    public data: Jimp;\n\n    constructor (\n        public width: number = 0,\n        public height: number = 0,\n        public x: number = 0,\n        public y: number = 0,\n        public rot: boolean = false\n    ) {\n        super();\n        this.sourceFrame = new Rectangle(0, 0, width, height);\n        this.anchor = new Vec2(width / 2, height / 2);\n        this.nineSliceFrame = new Rectangle(0, 0, width, height);\n        this.data = new Jimp(width, height);\n    }\n\n    public trimAlpha (): void {\n        // TODO\n        this.trimmed = true;\n    }\n\n    public rotate (): void {\n        this.rot = true;\n    }\n}\n","import { MaxRectsPacker, IOption } from \"maxrects-packer\";\nimport Jimp from \"jimp\";\nimport path from \"path\";\nimport { Sheet } from \"./geom/Sheet\";\n\n/**\n * Options class for composor and maxrects-packer\n *\n * @property {boolean} options.square use square size (default is true)\n * @property {boolean} options.pot use power of 2 sizing (default is true)\n * @property {boolean} options.square use square size (default is false)\n * @property {boolean} options.allowRotation allow rotation wihile packing (default is false)\n *\n * @export\n * @interface Option\n * @export\n * @class Options\n * @implements {IOption}\n */\nexport class Options implements IOption {\n\n    public smart: boolean = true;\n    public pot: boolean = true;\n    public square: boolean = false;\n    public allowRotation: boolean = false;\n    public trimAlpha: boolean = false; // TODO\n    public extrudeEdge: number = 0; // TODO\n\n   /**\n    * Creates an instance of Options.\n    * @param {string} [name='sprite'] output filename of atlas/spreadsheet (default is 'sprite.png')\n    * @param {number} [width=2048] ouput texture atlas width (defaut: 2048)\n    * @param {number} [height=2048] ouput texture atlas height (defaut: 2048)\n    * @param {number} [padding=0] padding between images (Default: 0)\n    * @memberof Options\n    */\n    constructor (\n        public name: string = 'sprite',\n        public width: number = 2048,\n        public height: number = 2048,\n        public padding: number = 0\n    ) { }\n}\n\nexport class Atlasify {\n\n   /**\n    * Creates an instance of Atlasify.\n    * @param {Options} options Atlasify Options class\n    * @memberof Atlasify\n    */\n    constructor (public options: Options) {\n        this.imageFilePaths = [];\n        this.rects = [];\n        this.packer = new MaxRectsPacker<Sheet>(options.width, options.height, options.padding, options);\n    }\n\n   /**\n    * Load arrays of pathalike images url and do packing\n    * @param {string[]} paths pathalike urls\n    * @memberof Atlasify\n    */\n    public load (paths: string[]): void {\n        this.imageFilePaths = paths;\n        const loader: Promise<void>[] = paths.map(async img => {\n            return Jimp.read(img)\n                .then(image => {\n                    const sheet: Sheet = new Sheet(image.bitmap.width, image.bitmap.height);\n                    sheet.data = image;\n                    sheet.name = path.basename(img);\n                    this.rects.push(sheet);\n                })\n                .catch(err => {\n                    console.error(\"File read error : \" + err);\n                });\n        });\n        Promise.all(loader)\n            .then(() => {\n                const ext: string = path.extname(this.options.name);\n                const basename: string = path.basename(this.options.name, ext);\n                const fillColor: number = (ext === \".png\" || ext === \".PNG\") ? 0x00000000 : 0x000000ff;\n\n                this.packer.addArray(this.rects);\n                this.packer.bins.forEach((bin, index: number) => {\n                    const binName: string = this.packer.bins.length > 1 ? `${basename}.${index}${ext}` : `${basename}${ext}`;\n                    const image = new Jimp(bin.width, bin.height, fillColor);\n                    bin.rects.forEach(rect => {\n                        const buffer: Jimp = rect.data;\n                        if (rect.rot) buffer.rotate(90);\n                        image.composite(buffer, rect.x, rect.y);\n                    });\n                    image.write(binName, () => {\n                        console.log('Wrote atlas image : ' + binName);\n                    });\n                });\n                // fs.writeFileSync(`${basename}.json`, JSON.stringify(this.packer));\n            })\n            .catch(err => {\n                console.error(\"File load error : \" + err);\n            });\n    }\n\n    private imageFilePaths: string[];\n    private rects: Sheet[];\n    private packer: MaxRectsPacker;\n}\n"],"names":[],"mappings":"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"}